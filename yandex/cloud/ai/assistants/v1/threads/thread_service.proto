syntax = "proto3";

package yandex.cloud.ai.assistants.v1.threads;

import "yandex/cloud/ai/common/common.proto";
import "yandex/cloud/ai/assistants/v1/threads/message.proto";
import "yandex/cloud/ai/assistants/v1/threads/thread.proto";
import "yandex/cloud/validation.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/assistants/v1/threads;threads";
option java_package = "yandex.cloud.api.ai.assistants.v1.threads";

service ThreadService {
  rpc Create (CreateThreadRequest) returns (Thread) {
    option (google.api.http) = {post: "/assistants/v1/threads" body: "*"};
  }

  rpc Get(GetThreadRequest) returns (Thread) {
    option (google.api.http) = {get: "/assistants/v1/threads/{thread_id}"};
  }

  rpc Update(UpdateThreadRequest) returns (Thread) {
    option (google.api.http) = {patch: "/assistants/v1/threads/{thread_id}" body: "*"};
  }

  rpc Delete(DeleteThreadRequest) returns (DeleteThreadResponse) {
    option (google.api.http) = {delete: "/assistants/v1/threads/{thread_id}"};
  }

  rpc List(ListThreadsRequest) returns (ListThreadsResponse) {
    option (google.api.http) = {get: "/assistants/v1/threads"};
  }
}

message CreateThreadRequest {
  string folder_id = 1 [(required) = true];

  repeated MessageData messages = 2;

  string name = 3;

  string description = 4;

  string default_message_author_id = 5;

  yandex.cloud.ai.common.ExpirationConfig expiration_config = 6;

  map<string, string> labels = 7;
}

message GetThreadRequest {
  string thread_id = 1 [(required) = true];
}

message UpdateThreadRequest {
  string thread_id = 1 [(required) = true];

  google.protobuf.FieldMask update_mask = 2 [(required) = true];

  string name = 3;

  string description = 4;

  yandex.cloud.ai.common.ExpirationConfig expiration_config = 5;

  map<string, string> labels = 6;
}

message DeleteThreadRequest {
  string thread_id = 1 [(required) = true];
}

message DeleteThreadResponse {
}

message ListThreadsRequest {
  string folder_id = 1 [(required) = true];

  int64 page_size = 2;

  string page_token = 3;
}

message ListThreadsResponse {
  repeated Thread threads = 1;

  string next_page_token = 2;
}
